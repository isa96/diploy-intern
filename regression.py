# -*- coding: utf-8 -*-
"""regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18UJhzHtxxg1EwydNZyAGcbJzWeU07xuK
"""

import warnings

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error

from statsmodels.tsa.arima_model import ARIMA
from statsmodels.tsa.stattools import adfuller, kpss
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf


warnings.filterwarnings("ignore")

data = pd.read_csv("clean-data.csv", sep=",")
data.head()

data.info()

df_ts = data.groupby("date")["qty"].sum().reset_index()
df_ts.tail()

print(df_ts.shape)

df_ts.describe()

df_ts.isnull().sum()

df_ts.isna().values.any()

df_ts[df_ts.duplicated()]

df_ts.boxplot()
plt.show()

Q1 = df_ts["qty"].quantile(0.25)
Q3 = df_ts["qty"].quantile(0.75)
IQR = Q3 - Q1
df_ts_clean = df_ts[
    ~((df_ts["qty"] < (Q1 - 1.5 * IQR)) | (df_ts["qty"] > (Q3 + 1.5 * IQR)))
]

df_ts_clean.tail()

df_ts_clean.boxplot()
plt.show()

df_ts_clean["date"] = pd.to_datetime(df_ts_clean["date"], dayfirst=True)
df_ts_clean["qty"] = df_ts_clean["qty"].map(float)
df_ts_clean.info()

plt.figure(figsize=(15, 6))
sns.set_style("whitegrid")
sns.lineplot(data=df_ts_clean, x="date", y="qty", linewidth=2)
plt.xlabel("Date")
plt.ylabel("Quantity")
plt.title("Total Daily Quantity Sales")
plt.tight_layout()
plt.show()

df_ts_new = df_ts_clean.copy()
df_ts_new.set_index(df_ts_clean["date"], inplace=True)
df_ts_new.drop(columns=["date"], inplace=True)
df_ts_new.info()

decomposition = seasonal_decompose(df_ts_new["qty"], model="multiplicative", period=12)

trend = decomposition.trend
seasonal = decomposition.seasonal
residual = decomposition.resid
plt.figure(figsize=(15, 6))
plt.subplot(311)
plt.plot(trend, label="Trend")
plt.legend(loc="best")
plt.subplot(312)
plt.plot(seasonal, label="Seasonality")
plt.legend(loc="best")
plt.subplot(313)
plt.plot(residual, label="Residuals")
plt.legend(loc="best")
plt.tight_layout()

roll_mean = df_ts_new.rolling(window=12).mean()
roll_std = df_ts_new.rolling(window=12).std()
print(roll_mean.head(5))
print(roll_std.head(5))

plt.figure(figsize=(15, 6))
plt.plot(df_ts_new["qty"], color="blue", label="original")
plt.plot(roll_mean, color="red", label="Rolling Mean")
plt.plot(roll_std, color="black", label="Rolling Std")
plt.title("Rolling Mean and Stdev vs Original")
plt.legend()

df_ts_new.head()

df_ts_diff = df_ts_new.copy()
adftest = adfuller(df_ts_diff["qty"])
adftest = adfuller(df_ts_diff)
adf_output = pd.Series(adftest[0:2], index=["Test Statistic", "p-value"])
print(adf_output)

kpsstest = kpss(df_ts_diff["qty"])
kpss_output = pd.Series(kpsstest[0:2], index=["Test Statistic", "p-value"])
print(kpss_output)

acf_original = plot_acf(df_ts_diff, lags=40)
pacf_original = plot_pacf(df_ts_diff, lags=40)

train_size = round(df_ts_diff.shape[0] * 0.987)
print(train_size)

train = df_ts_diff[:train_size]
test = df_ts_diff[train_size:]
print(train.shape)
print(test.shape)

arima_order = (5, 0, 5)
arima = ARIMA(train["qty"], order=arima_order)
arima_fit = arima.fit()
print(arima_fit.summary())

pred = arima_fit.predict()
df_train = pd.DataFrame(pred, columns=["prediksi"])
df_train["actual"] = train.values
df_train.head()

residual = df_train["actual"] - df_train["prediksi"]
residual.plot(kind="kde")
plt.show()

plt.figure(figsize=(15, 6))
plt.plot(df_train["prediksi"], color="red", label="prediksi")
plt.plot(df_train["actual"], color="green", label="actual")
plt.legend()
plt.show()

y_pred = arima_fit.forecast(len(test))[0]
df_test = pd.DataFrame(y_pred, columns=["prediksi"], index=test.index)
df_test["actual"] = test.values
df_test.head()

plt.figure(figsize=(15, 6))
plt.plot(df_test["prediksi"], color="blue", label="prediksi")
plt.plot(df_test["actual"], color="black", label="actual")
plt.legend()
plt.show()

rmse = mean_squared_error(df_test["actual"], df_test["prediksi"], squared=False)
mape = mean_absolute_percentage_error(df_test["actual"], df_test["prediksi"])
print(f"Nilai dari RMSE adalah sebesar {rmse:.3f}")
print(f"Nilai dari MAPE adalah sebesar {mape * 100:.3f} %")

forecast = arima_fit.forecast(3)[0]
forecast = pd.DataFrame(forecast, columns=["Prediction"])
forecast.head()
